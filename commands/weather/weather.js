const { processCommand } = require("../../utils/processCommand.js");

const URL = 'https://api.open-meteo.com/v1/forecast';

const weatherCodes = {
    0: "‚òÄÔ∏è C√©u Limpo",
    1: "üå§Ô∏è Predominantemente Limpo",
    2: "‚õÖ Parcialmente Nublado",
    3: "‚òÅÔ∏è Encoberto",
    45: "üå´Ô∏è Nevoeiro",
    48: "‚ùÑÔ∏è Nevoeiro com Geada",
    51: "üå¶Ô∏è Chuvisco Leve",
    53: "üåßÔ∏è Chuvisco Moderada",
    55: "üåßÔ∏è Chuvisco Densa",
    56: "üå®Ô∏è Chuvisco Congelante Leve",
    57: "üå®Ô∏è‚ùÑÔ∏è Chuvisco Congelante Densa",
    61: "üå¶Ô∏è Chuva Fraca",
    63: "üåßÔ∏è Chuva Moderada",
    65: "üåßÔ∏èüåä Chuva Forte",
    66: "üå®Ô∏è Chuva Congelante Leve",
    67: "üå®Ô∏è‚ùÑÔ∏è Chuva Congelante Forte",
    71: "‚ùÑÔ∏è Neve Fraca",
    73: "‚ùÑÔ∏è‚òÉÔ∏è Neve Moderada",
    75: "‚ùÑÔ∏èüå®Ô∏è Neve Forte",
    77: "üå®Ô∏è Granizo",
    80: "üå¶Ô∏è Pancadas de Chuva Fracas",
    81: "üåßÔ∏è Pancadas de Chuva Moderadas",
    82: "üåßÔ∏è Pancadas de Chuva Violentas",
    85: "‚ùÑÔ∏è Pancadas de Neve Fracas",
    86: "‚ùÑÔ∏èüå®Ô∏è Pancadas de Neve Fortes",
    95: "üå©Ô∏è Trovoada Fraca ou Moderada",
    96: "‚õàÔ∏è Trovoada com Granizo Leve",
    99: "‚õàÔ∏è Trovoada com Granizo Forte"
};

function formatWindDirection(windDirection) {
    const directions = ["N", "NE", "E", "SE", "S", "SO", "O", "NO"]; // should work xd
    return directions[Math.floor(windDirection / 45)];
}


async function getWeather(location) {
    const api_url = `https://nominatim.openstreetmap.org/search?q=${location}&format=json&limit=1&addressdetails=1`;
    const response = await fetch(api_url);

    const data = await response.json();
    if (data.length === 0) { return null; }

    const lat = data[0].lat;
    const lon = data[0].lon;
    const city = Object.values(data[0].address)[0];
    const country = data[0].address.country;
    const displayName = city + ', ' + country;

    const weatherInfo = await getWeatherInfo(displayName, lat, lon);

    return weatherInfo;
}

async function getWeatherInfo(displayName, lat, lon) {
    const api_url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,rain,weather_code,wind_speed_10m,wind_direction_10m`;
    const response = await fetch(api_url);
    const data = await response.json();

    const weatherCode = data.current.weather_code;
    const weatherDescription = weatherCodes[weatherCode];
    const temperature = data.current.temperature_2m;
    const humidity = data.current.relative_humidity_2m;
    const feelsLike = data.current.apparent_temperature;
    const precipitation = data.current.precipitation;
    const windSpeed = data.current.wind_speed_10m;
    const windDirection = formatWindDirection(data.current.wind_direction_10m);

    return { displayName, weatherDescription, temperature, humidity, feelsLike, precipitation, windSpeed, windDirection };
}


const weatherCommand = async (client, message) => {
    message.command = 'weather';
    if (!await processCommand(5000, 'channel', message, client)) return;

    let weatherTargetLocation = message.messageText.split(" ").slice(1).join(" ");
    let usedDbInfo = false;
    if (!weatherTargetLocation) {
        // get weather location from db
        const userWeatherDb = await client.db.get('weather', { userId: message.senderUserID });
        if (userWeatherDb.length === 0) {
            client.log.logAndReply(message, `Voc√™ ainda n√£o configurou uma localiza√ß√£o. Use ${message.commandPrefix}weather set <localiza√ß√£o> para configurar`);
            return;
        }
        weatherTargetLocation = userWeatherDb[0].location;
        usedDbInfo = true;
    }

    if (weatherTargetLocation.split(" ")[0] == 'set') {
        const location = weatherTargetLocation.split(" ").slice(1).join(" ");
        if (!location) {
            client.log.logAndReply(message, `Voc√™ precisa fornecer uma localiza√ß√£o para configurar. Use ${message.commandPrefix}weather set <localiza√ß√£o>`);
            return;
        }

        if (['secret', 'secreto'].includes(location.toLowerCase())) {
            const userWeatherDb = await client.db.get('weather', { userId: message.senderUserID });
            if (userWeatherDb.length === 0) {
                client.log.logAndReply(message, `Voc√™ ainda n√£o configurou uma localiza√ß√£o. Use ${message.commandPrefix}weather set <localiza√ß√£o> para configurar`);
                return;
            }
            const currentSecretState = userWeatherDb[0].secret;
            await client.db.update('weather', { userId: message.senderUserID }, { $set: { secret: !currentSecretState } });
            const emote = await client.emotes.getEmoteFromList(message.channelName, ['joia', 'jumilhao'], 'üëç');
            client.log.logAndReply(message, `Localiza√ß√£o alterada para estado ${!currentSecretState ? 'secreto' : 'p√∫blico'} ${emote}`);
            return;
        }

        const userWeatherDb = await client.db.get('weather', { userId: message.senderUserID });
        if (userWeatherDb.length === 0) {
            await client.db.insert('weather', { userId: message.senderUserID, location: location, secret: false });
            const emote = await client.emotes.getEmoteFromList(message.channelName, ['joia', 'jumilhao'], 'üëç');
            client.log.logAndReply(message, `Localiza√ß√£o configurada com sucesso ${emote}`);
            return;
        }
        await client.db.update('weather', { userId: message.senderUserID }, { $set: { location: location } });
        const emote = await client.emotes.getEmoteFromList(message.channelName, ['joia', 'jumilhao'], 'üëç');
        client.log.logAndReply(message, `Localiza√ß√£o configurada com sucesso ${emote}`);
        return;
    }

    let weatherInfo = await getWeather(weatherTargetLocation);
    if (!weatherInfo) {
        client.log.logAndReply(message, `Localiza√ß√£o n√£o encontrada`);
        return;
    }

    const userWeatherDb = await client.db.get('weather', { userId: message.senderUserID });
    if (usedDbInfo && userWeatherDb.length > 0 && userWeatherDb[0].secret) {
        weatherInfo.displayName = '(Localiza√ß√£o escondida)';
    }

    client.log.logAndReply(message,
        `${weatherInfo.displayName}: ${weatherInfo.weatherDescription}, ${weatherInfo.temperature}¬∞C (aparente: ${weatherInfo.feelsLike}¬∞C), ${weatherInfo.humidity}% humidade, ${weatherInfo.precipitation !== 0 ? `precipita√ß√£o: ${weatherInfo.precipitation}mm, ` : ''}${weatherInfo.windSpeed}km/h ${weatherInfo.windDirection}`);

    return;
};

weatherCommand.commandName = 'weather';
weatherCommand.aliases = ['weather', 'wt', 'clima'];
weatherCommand.shortDescription = 'Comando para verificar o clima de uma localiza√ß√£o';
weatherCommand.cooldown = 5000;
weatherCommand.whisperable = true;
weatherCommand.description = `Comando para verificar o clima de uma localiza√ß√£o

!weather {localiza√ß√£o} - Verifica o clima de uma localiza√ß√£o espec√≠fica fornecida
!weather set {localiza√ß√£o} - Configure a sua localiza√ß√£o para n√£o ter de especificar todas as vezes, se quiser que seja secreta, use este comando no whisper e depois use o !weather set secret
!weather set secret - Alterna o estado da localiza√ß√£o entre p√∫blico e secreto, para que n√£o seja exibida para outros usu√°rios
!weather - Caso tenha configurado uma localiza√ß√£o, verifica o clima da sua localiza√ß√£o configurada`;
weatherCommand.code = `https://github.com/leafyzito/jsFolhinha/blob/main/commands/${weatherCommand.commandName}/${weatherCommand.commandName}.js`;

module.exports = {
    weatherCommand,
};
